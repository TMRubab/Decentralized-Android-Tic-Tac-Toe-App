package TicTacToe.contracts3;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class TicTacToe extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b506122ca806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637b23e11b1161005b5780637b23e11b14610423578063a52169a414610446578063bff304dd146104f1578063fa7c9bcf146104f957610088565b80635cb119a91461008d5780635ff62824146101c857806368880a26146102fb5780636e3ba0331461041b575b600080fd5b6101b6600480360360408110156100a357600080fd5b810190602081018135600160201b8111156100bd57600080fd5b8201836020820111156100cf57600080fd5b803590602001918460018302840111600160201b831117156100f057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561014257600080fd5b82018360208201111561015457600080fd5b803590602001918460018302840111600160201b8311171561017557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610522945050505050565b60408051918252519081900360200190f35b6102f9600480360360608110156101de57600080fd5b810190602081018135600160201b8111156101f857600080fd5b82018360208201111561020a57600080fd5b803590602001918460018302840111600160201b8311171561022b57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b81111561028557600080fd5b82018360208201111561029757600080fd5b803590602001918460018302840111600160201b831117156102b857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061065e945050505050565b005b6103a66004803603604081101561031157600080fd5b81359190810190604081016020820135600160201b81111561033257600080fd5b82018360208201111561034457600080fd5b803590602001918460018302840111600160201b8311171561036557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506109a2945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103e05781810151838201526020016103c8565b50505050905090810190601f16801561040d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101b66110a1565b6102f96004803603604081101561043957600080fd5b508035906020013561111c565b6101b66004803603604081101561045c57600080fd5b81359190810190604081016020820135600160201b81111561047d57600080fd5b82018360208201111561048f57600080fd5b803590602001918460018302840111600160201b831117156104b057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061154d945050505050565b6101b6611842565b6102f96004803603606081101561050f57600080fd5b50803590602081013590604001356118bb565b6001805460009081526020818152604080832080546001600160a01b031916331790558354835282208551929361055e9391019186019061204c565b506001546000818152602081815260409091206002810192909255835161058b926003019185019061204c565b5060018054600090815260208181526040808320600490810184905584548452818420600501849055845484528184203385529252909120815481546001600160a01b0319166001600160a01b0391909116178155818301805492939192610607928481019291600291811615610100026000190116046120ca565b5060028201548160020155600382018160030190805460018160011615610100020316600290046106399291906120ca565b5060048281015490820155600591820154910155506001805480820190915592915050565b6001548210801561066d575060015b6106ac576040805162461bcd60e51b815260206004820152600b60248201526a696e76616c69642069642160a81b604482015290519081900360640190fd5b826040516020018082805190602001908083835b602083106106df5780518252601f1990920191602091820191016106c0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120600080848152602001908152602001600020600101604051602001808280546001816001161561010002031660029004801561078d5780601f1061076b57610100808354040283529182019161078d565b820191906000526020600020905b815481529060010190602001808311610779575b5050915050604051602081830303815290604052805190602001201480156108ae5750806040516020018082805190602001908083835b602083106107e35780518252601f1990920191602091820191016107c4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012060008084815260200190815260200160002060030160405160200180828054600181600116156101000203166002900480156108915780601f1061086f576101008083540402835291820191610891565b820191906000526020600020905b81548152906001019060200180831161087d575b505091505060405160208183030381529060405280519060200120145b6108e95760405162461bcd60e51b815260040180806020018281038252602b81526020018061221e602b913960400191505060405180910390fd5b6000828152602081815260408083208054336001600160a01b0319918216811780845590865260049094529190932080546001600160a01b039093169290911691909117815560018083018054610957928481019291600261010092821615929092026000190116046120ca565b5060028201548160020155600382018160030190805460018160011615610100020316600290046109899291906120ca565b5060048281015490820155600591820154910155505050565b336000908152600460205260409020546060906001600160a01b0316610a07576040805162461bcd60e51b8152602060048201526015602482015274283632b0b9b296103637b39034b7103334b939ba1760591b604482015290519081900360640190fd5b6003548310610a4f576040805162461bcd60e51b815260206004820152600f60248201526e09cde40e6eac6d040cec2daca40745608b1b604482015290519081900360640190fd5b6000838152600260205260409020546001600160a01b0316331415610abb576040805162461bcd60e51b815260206004820152601d60248201527f596f752061726520616c726561647920696e20746869732067616d6521000000604482015290519081900360640190fd5b6000838152600260205260409020600601546001600160a01b031615610b28576040805162461bcd60e51b815260206004820152601c60248201527f546869732067616d6520697320616c72656164792066756c6c203a2800000000604482015290519081900360640190fd5b816040516020018082805190602001908083835b60208310610b5b5780518252601f199092019160209182019101610b3c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120600260008581526020019081526020016000206011016040516020018082805460018160011615610100020316600290048015610c0a5780601f10610be8576101008083540402835291820191610c0a565b820191906000526020600020905b815481529060010190602001808311610bf6575b50509150506040516020818303038152906040528051906020012014610c6d576040805162461bcd60e51b8152602060048201526013602482015272496e636f72726563742050617373776f72642160681b604482015290519081900360640190fd5b6000838152600260208181526040808420600581018054600190810190915581546001600160a01b031680875260049094529190942080546001600160a01b031916909217825580840180549293610cd6938584019360001990821615610100020116046120ca565b506002820154816002015560038201816003019080546001816001161561010002031660029004610d089291906120ca565b5060048281015490820155600591820154910155600083815260026020818152604080842080840154855291849052909220825481546001600160a01b0319166001600160a01b03909116178155600180840180549293610d799383860193811615610100026000190116046120ca565b506002820154816002015560038201816003019080546001816001161561010002031660029004610dab9291906120ca565b5060048281015482820155600592830154918301919091553360009081526020918252604080822093840180546001908101909155878352600293849052912083546006820180546001600160a01b0319166001600160a01b039290921691909117815582850180549194610e37946007909401939192918216156101000260001901909116046120ca565b506002820154816002015560038201816003019080546001816001161561010002031660029004610e699291906120ca565b50600482810154828201556005928301549290910191909155336000908152602091825260408082208683526002808552828420600801548452938390529120815481546001600160a01b0319166001600160a01b03919091161781556001808301805493949293610eed93838601938216156101000260001901909116046120ca565b506002820154816002015560038201816003019080546001816001161561010002031660029004610f1f9291906120ca565b5060048281015490820155600591820154910155600083815260026020818152604092839020600e8101805460ff19166001908117909155845183815260079092018054918216156101000260001901909116939093049181018290527f8cf8e51f5655946d448e74ffca84753fcae14100c202cf01363c664c23785a7d939091829182019084908015610ff45780601f10610fc957610100808354040283529160200191610ff4565b820191906000526020600020905b815481529060010190602001808311610fd757829003601f168201915b50509250505060405180910390a16000838152600260208181526040928390206001908101805485519281161561010002600019011693909304601f810183900483028201830190945283815292908301828280156110945780601f1061106957610100808354040283529160200191611094565b820191906000526020600020905b81548152906001019060200180831161107757829003601f168201915b5050505050905092915050565b336000908152600460205260408120546001600160a01b0316611103576040805162461bcd60e51b8152602060048201526015602482015274283632b0b9b296103637b39034b7103334b939ba1760591b604482015290519081900360640190fd5b5033600090815260046020819052604090912001545b90565b6003548210611164576040805162461bcd60e51b815260206004820152600f60248201526e09cde40e6eac6d040cec2daca40745608b1b604482015290519081900360640190fd5b6000828152600260205260409020546001600160a01b03163314806111a257506000828152600260205260409020600601546001600160a01b031633145b6111f3576040805162461bcd60e51b815260206004820152601c60248201527f596f7520617265206e6f7420696e20746869732067616d65202d5f2d00000000604482015290519081900360640190fd5b60036000838152600260205260409020600e015460ff16600381111561121557fe5b141561122057611549565b6000828152600260205260409020600e01805460ff191660031790558061125f576000828152600260205260409020601001805460ff19169055611549565b80600114156113cb57600082815260026020818152604080842060108101805460ff19166001908117909155600480830180548301905582546001600160a01b031680885294529190942080546001600160a01b0319169092178255808401805492936112dd938584019361010090821615026000190116046120ca565b50600282015481600201556003820181600301908054600181600116156101000203166002900461130f9291906120ca565b5060048281015490820155600591820154910155600082815260026020818152604080842080840154855291849052909220825481546001600160a01b0319166001600160a01b039091161781556001808401805492936113809383860193811615610100026000190116046120ca565b5060028201548160020155600382018160030190805460018160011615610100020316600290046113b29291906120ca565b5060048281015490820155600591820154910155611549565b806002141561154957600082815260026020818152604080842060108101805460ff191685179055600a8101805460019081019091556006820180546001600160a01b031680885260049095529290952080546001600160a01b0319169093178355600701805491949293611454938581019361010091811615919091026000190116046120ca565b5060028201548160020155600382018160030190805460018160011615610100020316600290046114869291906120ca565b50600482810154908201556005918201549101556000828152600260208181526040808420600881015485529184905290922060068301805482546001600160a01b0319166001600160a01b039091161782556007909301805491926115029260018086019392908216156101000260001901909116046120ca565b5060028201548160020155600382018160030190805460018160011615610100020316600290046115349291906120ca565b50600482810154908201556005918201549101555b5050565b336000908152600460205260408120546001600160a01b03166115af576040805162461bcd60e51b8152602060048201526015602482015274283632b0b9b296103637b39034b7103334b939ba1760591b604482015290519081900360640190fd5b33600090815260046020908152604080832060035484526002928390529220825481546001600160a01b0319166001600160a01b039190911617815560018084018054929361160f938386019360001990821615610100020116046120ca565b5060028201548160020155600382018160030190805460018160011615610100020316600290046116419291906120ca565b50600482810154908201556005918201549101556003546000908152600260205260408120600c018490555b838110156116c05760005b848110156116b7576003546000908152600260209081526040808320858452600d0182528083208484529091529020805460ff19169055600101611678565b5060010161166d565b50600380546000818152600260209081526040808320600f810194909455600e909301805460ff19169055925481522083516117049260119092019185019061204c565b5060408051602080820180845260008084529351929392849201908190848083835b602083106117455780518252601f199092019160209182019101611726565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120846040516020018082805190602001908083835b602083106117b35780518252601f199092019160209182019101611794565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f1901835280855282519282019290922060035483529690961495810186905282519596507f45e7141f0e31fab757feae8d8a1031aefa654d3aa0bb7aa17f4e8a150adcbdb99590819003909201935090915050a1505060038054600181019091559392505050565b336000908152600460205260408120546001600160a01b03166118a4576040805162461bcd60e51b8152602060048201526015602482015274283632b0b9b296103637b39034b7103334b939ba1760591b604482015290519081900360640190fd5b503360009081526004602052604090206005015490565b6003548310611903576040805162461bcd60e51b815260206004820152600f60248201526e09cde40e6eac6d040cec2daca40745608b1b604482015290519081900360640190fd5b61190b61213f565b60008481526002602081815260409283902083516101a08101855281546001600160a01b031660e082019081526001808401805488516101009382161584026000190190911697909704601f810187900487028801870190985287875292969395879592948794928701939192918301828280156119ca5780601f1061199f576101008083540402835291602001916119ca565b820191906000526020600020905b8154815290600101906020018083116119ad57829003601f168201915b505050918352505060028281015460208084019190915260038401805460408051601f60001961010060018616150201909316959095049182018490048402850184018152818552909401939091830182828015611a695780601f10611a3e57610100808354040283529160200191611a69565b820191906000526020600020905b815481529060010190602001808311611a4c57829003601f168201915b50505091835250506004820154602080830191909152600590920154604091820152918352815160c0810183526006850180546001600160a01b031682526007860180548551601f6002600019600185161561010002019093169290920491820186900486028101860190965280865295840195929491938581019390830182828015611b375780601f10611b0c57610100808354040283529160200191611b37565b820191906000526020600020905b815481529060010190602001808311611b1a57829003601f168201915b505050918352505060028281015460208084019190915260038401805460408051601f60001961010060018616150201909316959095049182018490048402850184018152818552909401939091830182828015611bd65780601f10611bab57610100808354040283529160200191611bd6565b820191906000526020600020905b815481529060010190602001808311611bb957829003601f168201915b50505050508152602001600482015481526020016005820154815250508152602001600c8201548152602001600e820160009054906101000a900460ff166003811115611c1f57fe5b6003811115611c2a57fe5b8152600f8201546020820152601082015460409091019060ff166003811115611c4f57fe5b6003811115611c5a57fe5b815260118201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015611ce85780601f10611cbd57610100808354040283529160200191611ce8565b820191906000526020600020905b815481529060010190602001808311611ccb57829003601f168201915b505050919092525050815151919250506001600160a01b0316331480611d1b57506020810151516001600160a01b031633145b611d6c576040805162461bcd60e51b815260206004820152601c60248201527f596f7520617265206e6f7420696e20746869732067616d65202d5f2d00000000604482015290519081900360640190fd5b600381606001516003811115611d7e57fe5b1415611dd1576040805162461bcd60e51b815260206004820152601c60248201527f546869732067616d652068617320616c726561647920656e6465642100000000604482015290519081900360640190fd5b600081606001516003811115611de357fe5b1415611e205760405162461bcd60e51b815260040180806020018281038252602881526020018061226e6028913960400191505060405180910390fd5b611e2861219e565b600182606001516003811115611e3a57fe5b14611e49578160200151611e4c565b81515b80519091506001600160a01b03163314611ea4576040805162461bcd60e51b81526020600482015260146024820152734974206973206e6f7420796f7572207475726e2160601b604482015290519081900360640190fd5b816040015184108015611eb5575060015b8015611ec45750816040015183105b8015611ece575060015b611f095760405162461bcd60e51b81526004018080602001828103825260268152602001806121f86026913960400191505060405180910390fd5b6000858152600260209081526040808320878452600d01825280832086845290915281205460ff166003811115611f3c57fe5b14611f785760405162461bcd60e51b81526004018080602001828103825260258152602001806122496025913960400191505060405180910390fd5b60608201516000868152600260209081526040808320888452600d0182528083208784529091529020805460ff19166001836003811115611fb557fe5b0217905550600182606001516003811115611fcc57fe5b14611fd8576001611fdb565b60025b6000868152600260205260409020600e01805460ff1916600183600381111561200057fe5b0217905550604080518681526020810186905280820185905290517fa218cea2e9947b0c680d2e445c4082ba77a2a203ee283ee9ccbe43658a6e7db49181900360600190a15050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061208d57805160ff19168380011785556120ba565b828001600101855582156120ba579182015b828111156120ba57825182559160200191906001019061209f565b506120c69291506121dd565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061210357805485556120ba565b828001600101855582156120ba57600052602060002091601f016020900482015b828111156120ba578254825591600101919060010190612124565b6040518060e0016040528061215261219e565b815260200161215f61219e565b8152602001600081526020016000600381111561217857fe5b8152602001600081526020016000600381111561219157fe5b8152602001606081525090565b6040518060c0016040528060006001600160a01b0316815260200160608152602001600081526020016060815260200160008152602001600081525090565b61111991905b808211156120c657600081556001016121e356fe696e76616c6964206d6f7665202d20706f736974696f6e20646f6573206e6f74206578697374696e76616c6964206e616d65206f722070617373776f72642c20706c656173652074727920616761696e2e696e76616c6964206d6f7665202d20706f736974696f6e20616c72656164792074616b656e506c65617365207761697420666f7220746865206f7468657220706c6179657220746f206a6f696ea265627a7a72315820f45c84c25a03c02c340dc8b7ce5031641bcd03c4adff3d42880a9aebcd03f35864736f6c63430005100032";

    public static final String FUNC_ADDPLAYER = "addPlayer";

    public static final String FUNC_CREATEGAME = "createGame";

    public static final String FUNC_FINISHGAME = "finishGame";

    public static final String FUNC_GETNUMPLAYED = "getNumPlayed";

    public static final String FUNC_GETNUMWIN = "getNumWin";

    public static final String FUNC_JOINGAME = "joinGame";

    public static final String FUNC_LOGIN = "login";

    public static final String FUNC_MOVE = "move";

    public static final Event NEWGAME_EVENT = new Event("NewGame", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event PLAYERJOINEDGAME_EVENT = new Event("PlayerJoinedGame", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event PLAYERMADEMOVE_EVENT = new Event("PlayerMadeMove", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected TicTacToe(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TicTacToe(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TicTacToe(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TicTacToe(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<NewGameEventResponse> getNewGameEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWGAME_EVENT, transactionReceipt);
        ArrayList<NewGameEventResponse> responses = new ArrayList<NewGameEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewGameEventResponse typedResponse = new NewGameEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.free = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewGameEventResponse> newGameEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewGameEventResponse>() {
            @Override
            public NewGameEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWGAME_EVENT, log);
                NewGameEventResponse typedResponse = new NewGameEventResponse();
                typedResponse.log = log;
                typedResponse.gameIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.free = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewGameEventResponse> newGameEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWGAME_EVENT));
        return newGameEventFlowable(filter);
    }

    public List<PlayerJoinedGameEventResponse> getPlayerJoinedGameEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PLAYERJOINEDGAME_EVENT, transactionReceipt);
        ArrayList<PlayerJoinedGameEventResponse> responses = new ArrayList<PlayerJoinedGameEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PlayerJoinedGameEventResponse typedResponse = new PlayerJoinedGameEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PlayerJoinedGameEventResponse> playerJoinedGameEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PlayerJoinedGameEventResponse>() {
            @Override
            public PlayerJoinedGameEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PLAYERJOINEDGAME_EVENT, log);
                PlayerJoinedGameEventResponse typedResponse = new PlayerJoinedGameEventResponse();
                typedResponse.log = log;
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PlayerJoinedGameEventResponse> playerJoinedGameEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PLAYERJOINEDGAME_EVENT));
        return playerJoinedGameEventFlowable(filter);
    }

    public List<PlayerMadeMoveEventResponse> getPlayerMadeMoveEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PLAYERMADEMOVE_EVENT, transactionReceipt);
        ArrayList<PlayerMadeMoveEventResponse> responses = new ArrayList<PlayerMadeMoveEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PlayerMadeMoveEventResponse typedResponse = new PlayerMadeMoveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.row = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.col = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PlayerMadeMoveEventResponse> playerMadeMoveEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PlayerMadeMoveEventResponse>() {
            @Override
            public PlayerMadeMoveEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PLAYERMADEMOVE_EVENT, log);
                PlayerMadeMoveEventResponse typedResponse = new PlayerMadeMoveEventResponse();
                typedResponse.log = log;
                typedResponse.gameIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.row = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.col = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PlayerMadeMoveEventResponse> playerMadeMoveEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PLAYERMADEMOVE_EVENT));
        return playerMadeMoveEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addPlayer(String name, String password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDPLAYER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createGame(BigInteger Len, String password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(Len), 
                new org.web3j.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finishGame(BigInteger gameInd, BigInteger winner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FINISHGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameInd), 
                new org.web3j.abi.datatypes.generated.Int256(winner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getNumPlayed() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNUMPLAYED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getNumWin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNUMWIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> joinGame(BigInteger gameInd, String password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_JOINGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameInd), 
                new org.web3j.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> login(String name, BigInteger id, String password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> move(BigInteger gameInd, BigInteger row, BigInteger col) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MOVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameInd), 
                new org.web3j.abi.datatypes.generated.Uint256(row), 
                new org.web3j.abi.datatypes.generated.Uint256(col)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TicTacToe load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TicTacToe(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TicTacToe load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TicTacToe(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TicTacToe load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TicTacToe(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TicTacToe load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TicTacToe(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TicTacToe> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TicTacToe.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TicTacToe> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TicTacToe.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<TicTacToe> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TicTacToe.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TicTacToe> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TicTacToe.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class NewGameEventResponse extends BaseEventResponse {
        public BigInteger gameIndex;

        public Boolean free;
    }

    public static class PlayerJoinedGameEventResponse extends BaseEventResponse {
        public String name;
    }

    public static class PlayerMadeMoveEventResponse extends BaseEventResponse {
        public BigInteger gameIndex;

        public BigInteger row;

        public BigInteger col;
    }
}
